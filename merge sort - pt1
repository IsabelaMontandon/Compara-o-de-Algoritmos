#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge(int start, int middle, int end, int array[]) {
    int leftIndex, rightIndex, tempIndex, *tempArray;

    tempArray = (int*)malloc(sizeof(int) * (end - start));

    leftIndex = start;
    rightIndex = middle;
    tempIndex = 0;

    while (leftIndex < middle && rightIndex < end) {
        if (array[leftIndex] < array[rightIndex]) {
            tempArray[tempIndex++] = array[leftIndex++];
        } else {
            tempArray[tempIndex++] = array[rightIndex++];
        }
    }

    while (leftIndex < middle) {
        tempArray[tempIndex++] = array[leftIndex++];
    }

    while (rightIndex < end) {
        tempArray[tempIndex++] = array[rightIndex++];
    }

    for (leftIndex = start; leftIndex < end; leftIndex++) {
        array[leftIndex] = tempArray[leftIndex - start];
    }

    free(tempArray);
}

void mergeSort(int start, int end, int array[]) {
    if (start < end - 1) {
        int middle = (start + end) / 2;

        mergeSort(start, middle, array);
        mergeSort(middle, end, array);
        merge(start, middle, end, array);
    }
}

int main() {
    const int base_size = 50000;
    int scale, execution, index, num_executions = 3, num_scales = 8;
    int *array;
    clock_t start_time, end_time;
    double elapsed_time = 0, average_time = 0;

    srand(time(NULL));

    for (scale = 1; scale <= num_scales; scale++) {
        int current_size = base_size * scale;
        array = (int*)malloc(current_size * sizeof(int));
        if (array == NULL) {
            printf("Erro de alocação de memória!\n");
            return 1;
        }

        printf("Tamanho do vetor: %d\n\n", current_size);

        average_time = 0;  // Reiniciar o tempo médio a cada novo tamanho de vetor

        for (execution = 0; execution < num_executions; execution++) {
            // Inicializar o vetor com valores aleatórios
            for (index = 0; index < current_size; index++) {
                array[index] = rand() % 101;
            }

            start_time = clock();

            mergeSort(0, current_size, array);

            end_time = clock();

            elapsed_time = (double)(end_time - start_time) / CLOCKS_PER_SEC;
            average_time += elapsed_time;

            printf("Tempo execução %d: %f segundos\n", execution + 1, elapsed_time);
        }

        average_time /= num_executions;

        printf("Tempo médio: %f segundos\n\n", average_time);

        free(array);  // Liberar a memória alocada
    }

    return 0;
}
